export interface Vulnerability {
  type: string
  severity: "Critical" | "High" | "Medium" | "Low"
  description: string
  line: number
  codeSnippet: string
  recommendation: string
  cweId?: string
}

export interface AnalysisResult {
  vulnerabilities: Vulnerability[]
  language: string
  riskScore: number
  secureCode: string
  analysisTime: number
}

// Enhanced language detection with specific patterns
export function detectLanguage(code: string): string {
  const patterns = {
    HTML: [/<html/i, /<head/i, /<body/i, /<div/i, /<script/i, /<style/i, /<!DOCTYPE/i],
    CSS: [/\{[^}]*:[^}]*\}/, /@media/i, /@import/i, /\.[\w-]+\s*\{/, /#[\w-]+\s*\{/],
    JavaScript: [
      /function\s+\w+/,
      /const\s+\w+\s*=/,
      /let\s+\w+\s*=/,
      /var\s+\w+\s*=/,
      /=>\s*\{/,
      /console\.log/,
      /document\./,
      /window\./,
      /addEventListener/,
    ],
    Python: [
      /def\s+\w+\s*\(/,
      /import\s+\w+/,
      /from\s+\w+\s+import/,
      /if\s+__name__\s*==\s*['"']__main__['"']/,
      /print\s*\(/,
      /class\s+\w+/,
      /:\s*$/m,
    ],
    PHP: [/<\?php/, /\$\w+/, /echo\s+/, /mysqli_/, /PDO::/, /->[\w]+/],
    Java: [
      /public\s+class\s+\w+/,
      /public\s+static\s+void\s+main/,
      /System\.out\.print/,
      /import\s+java\./,
      /private\s+\w+\s+\w+/,
      /public\s+\w+\s+\w+\s*\(/,
    ],
    "C/C++": [
      /#include\s*<[\w.]+>/,
      /int\s+main\s*\(/,
      /printf\s*\(/,
      /cout\s*<</,
      /cin\s*>>/,
      /using\s+namespace\s+std/,
    ],
  }

  // Count matches for each language
  const scores: { [key: string]: number } = {}

  for (const [language, langPatterns] of Object.entries(patterns)) {
    scores[language] = 0
    for (const pattern of langPatterns) {
      const matches = code.match(new RegExp(pattern.source, pattern.flags + "g"))
      if (matches) {
        scores[language] += matches.length
      }
    }
  }

  // Find language with highest score
  const detectedLanguage = Object.entries(scores).reduce((a, b) => (scores[a[0]] > scores[b[0]] ? a : b))[0]

  return scores[detectedLanguage] > 0 ? detectedLanguage : "General"
}

// Comprehensive vulnerability patterns for OWASP Top 10
const vulnerabilityPatterns = {
  "SQL Injection": {
    patterns: [
      /query\s*\(\s*['""][^'"]*\$\w+[^'"]*['""]|query\s*\(\s*['""][^'"]*\+[^'"]*['""]|SELECT\s+.*\$\w+|INSERT\s+.*\$\w+/gi,
      /mysqli_query\s*\([^)]*\$\w+/gi,
      /execute\s*\([^)]*\$\w+/gi,
      /WHERE\s+.*=\s*['"]\s*\+|WHERE\s+.*=\s*\$\w+/gi,
    ],
    severity: "Critical" as const,
    description:
      "SQL injection vulnerability detected. User input is directly concatenated into SQL queries without proper sanitization.",
    recommendation:
      "Use prepared statements with parameterized queries. Never concatenate user input directly into SQL queries.",
    cweId: "CWE-89",
  },
  "Cross-Site Scripting (XSS)": {
    patterns: [
      /innerHTML\s*=\s*.*\+|innerHTML\s*=\s*\$\w+|innerHTML\s*=\s*[^'"]*\$\w+/gi,
      /document\.write\s*\([^)]*\+|document\.write\s*\([^)]*\$\w+/gi,
      /echo\s+\$_(GET|POST|REQUEST)\[/gi,
      /print\s+\$_(GET|POST|REQUEST)\[/gi,
      /<script[^>]*>\s*\$\w+/gi,
    ],
    severity: "High" as const,
    description: "Cross-Site Scripting (XSS) vulnerability found. User input is rendered without proper encoding.",
    recommendation: "Always encode user input before rendering. Use proper templating engines with auto-escaping.",
    cweId: "CWE-79",
  },
  "Broken Access Control": {
    patterns: [
      /if\s*\(\s*\$_(SESSION|GET|POST)\['(admin|role|user_type)'\]\s*==\s*['"](admin|1)['"]/gi,
      /SELECT\s+\*\s+FROM\s+users\s+WHERE\s+id\s*=\s*\$_(GET|POST)\[/gi,
      /file_get_contents\s*\(\s*\$_(GET|POST)\[/gi,
      /include\s*\(\s*\$_(GET|POST)\[/gi,
    ],
    severity: "Critical" as const,
    description: "Broken access control detected. Authorization checks may be bypassed or insufficient.",
    recommendation:
      "Implement proper authorization checks. Validate user permissions on server-side for every request.",
    cweId: "CWE-284",
  },
  "Cryptographic Failures": {
    patterns: [
      /md5\s*\(/gi,
      /sha1\s*\(/gi,
      /base64_encode\s*\(/gi,
      /password\s*=\s*['"]\w+['"]/gi,
      /api_key\s*=\s*['"]\w+['"]/gi,
    ],
    severity: "High" as const,
    description: "Weak cryptographic implementation detected. Using outdated or insecure hashing algorithms.",
    recommendation: "Use strong cryptographic algorithms like bcrypt, scrypt, or Argon2 for password hashing.",
    cweId: "CWE-327",
  },
  Injection: {
    patterns: [
      /eval\s*\(/gi,
      /exec\s*\(/gi,
      /system\s*\(/gi,
      /shell_exec\s*\(/gi,
      /passthru\s*\(/gi,
      /os\.system\s*\(/gi,
      /subprocess\.call\s*\(/gi,
    ],
    severity: "Critical" as const,
    description: "Code injection vulnerability detected. Dynamic code execution with user input.",
    recommendation: "Avoid dynamic code execution. Use safe alternatives and validate all inputs.",
    cweId: "CWE-94",
  },
  "Security Misconfiguration": {
    patterns: [
      /error_reporting\s*$$\s*E_ALL\s*$$/gi,
      /display_errors\s*=\s*['"](on|1)['"]/gi,
      /DEBUG\s*=\s*True/gi,
      /console\.log\s*$$[^)]*password[^)]*$$/gi,
    ],
    severity: "Medium" as const,
    description: "Security misconfiguration detected. Sensitive information may be exposed.",
    recommendation: "Disable debug mode in production. Remove console.log statements with sensitive data.",
    cweId: "CWE-16",
  },
  "Vulnerable Components": {
    patterns: [
      /jquery-1\.[0-7]\./gi,
      /bootstrap-2\./gi,
      /angular-1\.[0-5]\./gi,
      /<script[^>]*src=[^>]*jquery\/1\.[0-7]/gi,
    ],
    severity: "Medium" as const,
    description: "Outdated or vulnerable components detected.",
    recommendation: "Update to latest secure versions of all dependencies.",
    cweId: "CWE-1104",
  },
  "Authentication Failures": {
    patterns: [
      /password\s*==\s*['"]\w+['"]/gi,
      /if\s*\(\s*\$_POST\['password'\]\s*==\s*['"]\w+['"]/gi,
      /login\s*\(\s*[^)]*without.*hash/gi,
      /session_start\s*$$\s*$$\s*;\s*\$_SESSION\['logged_in'\]\s*=\s*true/gi,
    ],
    severity: "High" as const,
    description: "Authentication failure detected. Weak password validation or session management.",
    recommendation: "Implement strong password policies and secure session management.",
    cweId: "CWE-287",
  },
  "Data Integrity Failures": {
    patterns: [
      /unserialize\s*\(\s*\$_(GET|POST|COOKIE)\[/gi,
      /pickle\.loads\s*\(/gi,
      /JSON\.parse\s*\(\s*[^)]*\$\w+/gi,
      /eval\s*\(\s*JSON\.stringify/gi,
    ],
    severity: "High" as const,
    description: "Data integrity failure detected. Unsafe deserialization of user data.",
    recommendation: "Validate and sanitize all serialized data. Use safe serialization methods.",
    cweId: "CWE-502",
  },
  "Logging Failures": {
    patterns: [
      /catch\s*$$[^)]*$$\s*\{\s*\}/gi,
      /except\s*:\s*pass/gi,
      /try\s*\{[^}]*\}\s*catch\s*$$[^)]*$$\s*\{\s*\}/gi,
    ],
    severity: "Low" as const,
    description: "Security logging failure detected. Errors are silently ignored.",
    recommendation: "Implement proper error logging and monitoring for security events.",
    cweId: "CWE-778",
  },
}

export function analyzeCode(code: string): AnalysisResult {
  const startTime = Date.now()
  const vulnerabilities: Vulnerability[] = []
  const lines = code.split("\n")
  const language = detectLanguage(code)

  // Analyze each vulnerability pattern
  for (const [vulnType, config] of Object.entries(vulnerabilityPatterns)) {
    for (const pattern of config.patterns) {
      let match
      while ((match = pattern.exec(code)) !== null) {
        const lineNumber = code.substring(0, match.index).split("\n").length
        const lineContent = lines[lineNumber - 1]?.trim() || match[0]

        vulnerabilities.push({
          type: vulnType,
          severity: config.severity,
          description: config.description,
          line: lineNumber,
          codeSnippet: lineContent,
          recommendation: config.recommendation,
          cweId: config.cweId,
        })
      }
    }
  }

  // Remove duplicates
  const uniqueVulns = vulnerabilities.filter(
    (vuln, index, self) => index === self.findIndex((v) => v.type === vuln.type && v.line === vuln.line),
  )

  // Calculate risk score
  const riskScore = calculateRiskScore(uniqueVulns)

  // Generate secure code
  const secureCode = generateSecureCode(code, uniqueVulns, language)

  return {
    vulnerabilities: uniqueVulns,
    language,
    riskScore,
    secureCode,
    analysisTime: Date.now() - startTime,
  }
}

function calculateRiskScore(vulnerabilities: Vulnerability[]): number {
  if (vulnerabilities.length === 0) return 0

  const severityWeights = {
    Critical: 25,
    High: 15,
    Medium: 8,
    Low: 3,
  }

  const totalScore = vulnerabilities.reduce((score, vuln) => {
    return score + severityWeights[vuln.severity]
  }, 0)

  return Math.min(100, totalScore)
}

function generateSecureCode(originalCode: string, vulnerabilities: Vulnerability[], language: string): string {
  if (vulnerabilities.length === 0) {
    return `// ✅ No vulnerabilities found! Your code follows security best practices.\n\n${originalCode}`
  }

  const secureCode = originalCode
  const fixes: string[] = []

  // Apply fixes based on vulnerability types
  vulnerabilities.forEach((vuln) => {
    switch (vuln.type) {
      case "SQL Injection":
        if (language === "PHP") {
          fixes.push(`
// ✅ FIXED: SQL Injection Prevention
// Use prepared statements instead of string concatenation
$stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
$stmt->execute([$user_id]);
$result = $stmt->fetchAll();`)
        } else if (language === "Python") {
          fixes.push(`
# ✅ FIXED: SQL Injection Prevention
# Use parameterized queries
cursor.execute("SELECT * FROM users WHERE id = %s", (user_id,))
result = cursor.fetchall()`)
        } else {
          fixes.push(`
// ✅ FIXED: SQL Injection Prevention
// Use parameterized queries or ORM methods
const result = await db.query('SELECT * FROM users WHERE id = $1', [userId]);`)
        }
        break

      case "Cross-Site Scripting (XSS)":
        if (language === "JavaScript") {
          fixes.push(`
// ✅ FIXED: XSS Prevention
// Use textContent instead of innerHTML for user data
element.textContent = userInput; // Safe
// Or use proper escaping
element.innerHTML = escapeHtml(userInput);`)
        } else if (language === "PHP") {
          fixes.push(`
// ✅ FIXED: XSS Prevention
// Always escape output
echo htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8');`)
        }
        break

      case "Broken Access Control":
        fixes.push(`
// ✅ FIXED: Access Control
// Implement proper authorization checks
function checkUserPermission($userId, $resource) {
    // Verify user identity and permissions
    $user = getUserById($userId);
    return $user && $user->hasPermission($resource);
}

if (!checkUserPermission($_SESSION['user_id'], 'admin_panel')) {
    http_response_code(403);
    exit('Access denied');
}`)
        break

      case "Cryptographic Failures":
        if (language === "PHP") {
          fixes.push(`
// ✅ FIXED: Strong Password Hashing
// Use password_hash() with strong algorithms
$hashedPassword = password_hash($password, PASSWORD_ARGON2ID);

// Verify passwords securely
if (password_verify($inputPassword, $hashedPassword)) {
    // Password is correct
}`)
        } else if (language === "Python") {
          fixes.push(`
# ✅ FIXED: Strong Password Hashing
import bcrypt

# Hash password
hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

# Verify password
if bcrypt.checkpw(password.encode('utf-8'), hashed):
    # Password is correct`)
        }
        break

      case "Injection":
        fixes.push(`
// ✅ FIXED: Command Injection Prevention
// Use safe alternatives and input validation
const allowedCommands = ['ls', 'pwd', 'date'];
if (!allowedCommands.includes(command)) {
    throw new Error('Invalid command');
}
// Use spawn with array arguments instead of shell execution`)
        break

      case "Security Misconfiguration":
        fixes.push(`
// ✅ FIXED: Security Configuration
// Production settings
const config = {
    debug: false,
    errorReporting: false,
    logErrors: true,
    displayErrors: false
};

// Remove sensitive console.log statements
// console.log('Password:', password); // ❌ Remove this`)
        break

      case "Authentication Failures":
        fixes.push(`
// ✅ FIXED: Secure Authentication
// Implement proper session management
session_start();
session_regenerate_id(true); // Prevent session fixation

// Use secure password verification
if (password_verify($inputPassword, $storedHash)) {
    $_SESSION['user_id'] = $user['id'];
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}`)
        break

      case "Data Integrity Failures":
        fixes.push(`
// ✅ FIXED: Safe Deserialization
// Validate data before deserialization
function safeUnserialize($data) {
    // Whitelist allowed classes
    $allowedClasses = ['User', 'Product'];
    return unserialize($data, ['allowed_classes' => $allowedClasses]);
}`)
        break

      case "Logging Failures":
        fixes.push(`
// ✅ FIXED: Proper Error Handling
try {
    // Risky operation
    performOperation();
} catch (Exception $e) {
    // Log the error securely
    error_log('Security event: ' . $e->getMessage());
    // Return generic error to user
    return ['error' => 'Operation failed'];
}`)
        break
    }
  })

  // Combine original code with fixes
  const header = `/*
🔒 SECURITY ANALYSIS RESULTS
Found ${vulnerabilities.length} vulnerability${vulnerabilities.length > 1 ? "ies" : ""}:
${vulnerabilities.map((v) => `- ${v.type} (${v.severity})`).join("\n")}

The following code includes security fixes:
*/

`

  return header + fixes.join("\n\n") + "\n\n// Original code with security improvements applied:\n" + secureCode
}
